Q 1: Accept a number from the user and find the factorial of the number using a function with a parameter and return type.
Q 2: Write a function that accepts a string and returns True if the string is a palindrome, and False otherwise.
Q 3: Write a function that accepts a list of numbers and returns the sum of all even numbers in the list.
Q 4: Write a function that accepts a list of numbers and returns the maximum value in the list.
Q 5: Accept a number from the user and check if it is a prime number using a function with a parameter and return type.
Q 6: Write a function that accepts a string and a character, and returns the number of times the character appears in the string.
Q 7: Write a function that accepts a list of strings and returns a new list with each string reversed.
Q 8: Write a function that accepts a list of numbers and returns the average of the numbers.
Q 9:Accept a string from the user and print it in uppercase if the length of the string is greater than 5, else print it in lowercase using a function.
Q 10: Write a function that accepts a list of numbers and returns a new list with only the numbers that are divisible by 3.
Q 11: Write a function that accepts a list of numbers and returns a new list with the squares of all the numbers in the list.
Q 12: Write a function that accepts a string and counts how many vowels are in the string.
Q 13: Write a function that accepts a number and prints its multiplication table from 1 to 10.
Q 14: Write a function that accepts a list of strings and returns the longest string in the list.
Q 15: Write a function that accepts a number and checks if it is an Armstrong number.
Q 16: Write a function that accepts a number and returns the sum of its digits.
Q 17: Write a function that accepts a string and returns the string in alternating uppercase and lowercase characters.
Q 18: Write a function that accepts a list of integers and returns the second largest number in the list.
Q 19: Write a function that accepts a list of numbers and returns the product of all the numbers in the list.
Q 20: Write a function that accepts a list of strings and returns a new list with only the strings that have an odd length.
Q 21: Write a function that accepts a string and returns the first non-repeating character in the string.
Q 22: Write a function that accepts a string and a substring, and returns True if the substring is found in the string, otherwise False.
Q 23: Write a function that accepts a list of integers and returns the list sorted in descending order.
Q 24: Write a function that accepts a list of numbers and returns the number of prime numbers in the list.
Q 25: Write a function that accepts a list of numbers and returns the number of negative numbers in the list.
Q 26: Write a function that accepts a string and returns the number of words in the string.
Q 27: Write a function that accepts two strings and checks if one string is an anagram of the other.
Q 28: Write a function that accepts a string and removes all duplicate characters from the string.
Q 29: Write a function that accepts a list of integers and returns the sum of all numbers greater than 10.
Q 30: Write a function that accepts a list of strings and returns the total number of characters in all strings.
Q 31: Write a function that accepts a string and returns the number of times a given word appears in the string.
Q 32: Write a function that accepts a list of strings and returns a new list where each string is capitalized.
Q 33: Write a function that accepts a list of numbers and returns a new list with all the numbers that are divisible by both 2 and 3.
Q 34: Write a function that accepts a string and returns True if the string is a valid email address (contains "@" and "."), otherwise False.
Q 35: Write a function that accepts a list of integers and returns the count of even numbers in the list.
Q 36: Write a function that accepts a string and checks if it contains only numeric characters.
Q 37: Write a function that accepts a string and returns a dictionary where the keys are the characters and the values are the counts of those characters in the string.
Q 38: Write a function that accepts a list of integers and returns a new list with all the positive numbers squared.
Q 39: Write a function that accepts a list of strings and returns a list of the strings with their lengths.
Q 40: Write a function that accepts a number and prints whether it is a perfect number (a number that is equal to the sum of its divisors, excluding the number itself).
Q 41: Write a function that accepts a string and returns the string with all vowels removed.
Q 42: Write a function that accepts a list of numbers and returns a new list where each number is divided by 2.
Q 43: Write a function that accepts a list of numbers and returns the average of the numbers, excluding any zero values.
Q 44: Write a function that accepts two strings and returns the common characters between them.
Q 45: Write a function that accepts a string and returns the longest word in the string.
Q 46: Write a function that accepts a list of integers and returns the median value of the list.
Q 47: Write a function that accepts a list of numbers and returns the smallest number that is divisible by both 4 and 5.
Q 48: Write a function that accepts a number and returns a list of all the divisors of the number.
Q 49: Write a function that accepts a string and returns the string with each word reversed, but the order of the words remains the same.
Q 50: Write a function that accepts a list of strings and returns a new list containing only the strings that start with a vowel.

Q 51: Email Address Validator
Write a function is_valid_email(email) that accepts an email address as a string and checks if it follows a valid format (contains "@" and "."). Return True if valid, otherwise False.

Q 52: Sum of Digits in a String
Write a function sum_of_digits_in_string(s) that accepts a string containing alphanumeric characters and returns the sum of all digits found in the string.

Q 53: Remove Duplicate Words
Write a function remove_duplicate_words(sentence) that accepts a string with multiple words and returns a new string where all duplicate words are removed while maintaining the original order of words.

Q 54: Student Grading System
Write a function calculate_grade(marks) that accepts the marks of a student (out of 100) and returns the grade as per the following scale:

90 and above: "A"
80 to 89: "B"
70 to 79: "C"
60 to 69: "D"
Below 60: "F"

Q 55: Remove Whitespace from a String :Write a function remove_whitespace(s) that accepts a string and returns the string with all leading, trailing, and extra spaces between words removed.

Q 56: Count Words in a Sentence :Write a function count_words(sentence) that accepts a sentence and returns the number of words in the sentence.

Q 57: Find Missing Number in Sequence
Write a function find_missing_number(numbers) that accepts a list of numbers from 1 to N, with one number missing. The function should return the missing number.

Q 58: Find Common Elements in Two Lists
Write a function find_common_elements(list1, list2) that accepts two lists and returns a list containing the common elements from both lists.

Q 59: Sum of Positive and Negative Numbers
Write a function sum_positive_and_negative(lst) that accepts a list of integers and returns a tuple with the sum of all positive numbers and the sum of all negative numbers.

Q 60: Check if a String is a Substring
Write a function is_substring(str1, str2) that accepts two strings and checks if the first string is a substring of the second string. Return True or False.

Q 61: Sort List of Tuples by Second Element
Write a function sort_tuples(lst) that accepts a list of tuples, and sorts the list based on the second element of each tuple in ascending order.

Q 62: Generate a List of Prime Numbers
Write a function generate_primes(n) that accepts a number n and returns a list of all prime numbers less than or equal to n.

Q 63: Fibonacci Sequence
Write a function generate_fibonacci(n) that accepts a number n and returns a list containing the first n numbers of the Fibonacci sequence.

Q 64: Merge Two Lists Alternately
Write a function merge_alternate(list1, list2) that accepts two lists of the same length and returns a new list by merging them alternately.

Q 65: Count Specific Character Occurrences
Write a function count_character(string, char) that accepts a string and a character, and returns the number of times the character appears in the string.

Q 66: Concatenate Strings with a Separator
Write a function concatenate_with_separator(lst, separator) that accepts a list of strings and a separator string, then returns a new string where all elements of the list are joined using the separator.

Q 67: Reverse a List
Write a function reverse_list(lst) that accepts a list and returns the list in reverse order.

Q 68: Generate Random Password
Write a function generate_password(length) that accepts a length as an argument and returns a randomly generated password of that length consisting of uppercase letters, lowercase letters, and digits.

Q 69: Find the First Repeating Element
Write a function find_first_repeating_element(lst) that accepts a list of integers and returns the first element that repeats. If no element repeats, return None.

Q 70: Sort Strings by Length
Write a function sort_by_length(lst) that accepts a list of strings and sorts the strings by their lengths in ascending order.

Q 71: Merge Two Dictionaries
Write a function merge_dicts(dict1, dict2) that accepts two dictionaries and returns a single dictionary that contains the merged key-value pairs from both dictionaries.

Q 72: Check if Two Lists are Anagrams
Write a function are_anagrams(list1, list2) that accepts two lists of strings and checks if one list is an anagram of the other (i.e., the lists contain the same elements, but possibly in different orders).

Q 73: Flatten a Nested List
Write a function flatten_list(nested_list) that accepts a nested list (list containing other lists) and returns a flat list containing all the elements.

Q 74: Print Prime Numbers in a Range
Write a function print_primes_in_range(start, end) that accepts two numbers and prints all prime numbers between start and end (inclusive).

Q 75: Find the Longest Word in a Sentence
Write a function longest_word(sentence) that accepts a sentence and returns the longest word in the sentence.

Q 76: Convert a String to Title Case
Write a function to_title_case(sentence) that accepts a string and returns the string in title case (the first letter of each word capitalized).

Q 77: Count the Occurrence of Each Character
Write a function count_character_occurrences(string) that accepts a string and returns a dictionary with the count of each character in the string.

Q 78: Calculate Simple Interest
Write a function calculate_simple_interest(principal, rate, time) that accepts the principal, rate of interest, and time, and returns the calculated simple interest.

Q 79: Find Unique Elements in List
Write a function find_unique_elements(lst) that accepts a list and returns a new list containing only the unique elements from the original list.

Q 80: Generate Multiplication Table
Write a function generate_multiplication_table(n) that accepts a number n and prints its multiplication table (from 1 to 10).

Q 81: Create a Dictionary from Two Lists
Write a function create_dict(keys, values) that accepts two lists, keys and values, and returns a dictionary where the keys are from the first list and the values are from the second list.

Q 82: Check if Two Strings are Anagrams
Write a function is_anagram(str1, str2) that accepts two strings and checks if they are anagrams of each other (i.e., they contain the same characters in different orders).

Q 83: Count Occurrences of Words in a Sentence
Write a function count_word_occurrences(sentence) that accepts a sentence and returns a dictionary with the count of each word in the sentence.

Q 84: Remove Duplicates from a List of Strings
Write a function remove_duplicates(lst) that accepts a list of strings and returns a new list with duplicate strings removed.

Q 85: Convert Fahrenheit to Celsius
Write a function fahrenheit_to_celsius(fahrenheit) that accepts a temperature in Fahrenheit and converts it to Celsius.

Q 86: Find the Most Frequent Element in a List
Write a function find_most_frequent(lst) that accepts a list of elements and returns the most frequent element in the list. If there are multiple frequent elements, return any one of them.

Q 87: Merge Two Dictionaries
Write a function merge_dicts(dict1, dict2) that accepts two dictionaries and merges them into one. If there are overlapping keys, the values from the second dictionary should overwrite the values from the first.

Q 88: Count the Occurrence of Each Item in a List
Write a function count_items(lst) that accepts a list of items and returns a dictionary where the keys are the items from the list, and the values are the number of times each item appears.

Q 89: Create a Dictionary from Two Lists
Write a function create_dict(keys, values) that accepts two lists: one containing keys and the other containing values. The function should return a dictionary with the keys from the first list and the corresponding values from the second list.

Q 90: Remove Duplicates from a List and Keep Order
Write a function remove_duplicates(lst) that accepts a list and removes any duplicate elements while keeping the original order of the elements.

Q 91: Sort a Dictionary by Value
Write a function sort_dict_by_value(d) that accepts a dictionary and returns a new dictionary sorted by its values in ascending order.

Q 92: Sum All Values in a Dictionary
Write a function sum_dict_values(d) that accepts a dictionary where the values are numbers. The function should return the sum of all values in the dictionary.

Q 93: Find the Key with the Maximum Value in a Dictionary
Write a function find_max_key(d) that accepts a dictionary and returns the key that has the highest value. If there are multiple keys with the same maximum value, return any one of them.

Q 94: List of Keys with Minimum Value
Write a function min_value_keys(d) that accepts a dictionary and returns a list of keys that have the minimum value in the dictionary.

Q 95: Combine Multiple Lists into a Dictionary
Write a function combine_lists_to_dict(keys, values) that accepts two lists, one containing keys and the other containing values. The function should combine them into a dictionary and return it. If there are more values than keys, ignore the extra values.

Q 96: Check if a Dictionary Contains a Specific Key
Write a function contains_key(d, key) that accepts a dictionary and a key. It should return True if the key exists in the dictionary and False otherwise.

Q 97: Flatten a List of Lists
Write a function flatten_list_of_lists(lst) that accepts a list of lists (a nested list) and returns a flat list containing all the elements of the inner lists.

Q 98: Find the Difference Between Two Lists
Write a function find_difference(lst1, lst2) that accepts two lists and returns a new list containing elements that are in the first list but not in the second.

Q 99: Group List Elements by Frequency
Write a function group_by_frequency(lst) that accepts a list and groups the elements based on their frequency. The function should return a dictionary where the keys are the frequencies and the values are lists of elements that occur that many times.

Q 100: Find the Common Keys in Two Dictionaries
Write a function find_common_keys(dict1, dict2) that accepts two dictionaries and returns a list of keys that appear in both dictionaries.

Q 101: Update Dictionary Values Based on Another Dictionary
Write a function update_dict(d1, d2) that accepts two dictionaries. It should update the values of d1 with the values from d2 where the keys match. If a key from d2 does not exist in d1, it should be added.

Q 102: Find the Longest Key in a Dictionary
Write a function longest_key(d) that accepts a dictionary and returns the key with the longest length.

Q  103: Check if a List Contains Only Unique Elements
Write a function is_unique(lst) that accepts a list and returns True if all the elements are unique, and False if any element appears more than once.

Q 104: Convert a Dictionary to a List of Tuples
Write a function dict_to_tuples(d) that accepts a dictionary and returns a list of tuples where each tuple contains a key-value pair from the dictionary.

Q 105: Find Missing Numbers in a List
Write a function find_missing_numbers(lst, n) that accepts a list of integers and a number n. The list contains integers from 1 to n with some numbers missing. The function should return a list of the missing numbers.

Q 106: Split a List into Two Lists
Write a function split_list(lst) that accepts a list and splits it into two lists. The first list should contain the first half of the elements, and the second list should contain the second half.

Q  107: Sum All Even Keys in a Dictionary
Write a function sum_even_keys(d) that accepts a dictionary with integers as keys and returns the sum of all keys that are even numbers.

Q 108: Create a Frequency Dictionary from a List
Write a function create_frequency_dict(lst) that accepts a list and returns a dictionary where the keys are the elements of the list, and the values are the count of how often each element appears.

Q 109: Merge Two Lists into a Dictionary with List Indices as Keys
Write a function merge_lists_into_dict(list1, list2) that accepts two lists of equal length and merges them into a dictionary where the keys are the indices (0 to n-1) and the values are the elements from both lists.

Q 110: Count the Number of Even and Odd Numbers in a List
Write a function count_even_odd(lst) that accepts a list of integers and returns a dictionary with the count of even numbers and odd numbers.

Q 111: Check if a Dictionary is Empty
Write a function is_empty(d) that accepts a dictionary and returns True if the dictionary is empty, otherwise False.

Q 112: Remove Keys from Dictionary Based on a Condition
Write a function remove_keys_by_condition(d, condition) that accepts a dictionary and removes the keys where the corresponding values satisfy a condition. For example, removing all keys with values greater than a specific threshold.

Q 113: Find the Union of Two Lists
Write a function find_union(lst1, lst2) that accepts two lists and returns a new list that contains the union of both lists (all elements from both lists without duplicates).

Q 114: Create a Dictionary of Squares from a List
Write a function create_square_dict(lst) that accepts a list of numbers and returns a dictionary where the keys are the numbers and the values are their squares.

Q 115: Convert a List to a Dictionary with Indexes as Keys
Write a function list_to_dict(lst) that accepts a list and returns a dictionary where the keys are the indices of the list, and the values are the elements at those indices.

Q 116: Read a File and Count Words
Write a function count_words_in_file(filename) that accepts a file name, reads the file, and returns the total number of words in the file.

Q 117: Write a List of Strings to a File
Write a function write_list_to_file(lst, filename) that accepts a list of strings and writes each string to a new line in the specified file.

Q 118: Read and Parse CSV File
Write a function read_csv_file(filename) that reads a CSV file and returns the data as a list of dictionaries, where the keys are the column names and the values are the corresponding row values.

Q 119: Copy Content from One File to Another
Write a function copy_file_content(source_filename, destination_filename) that copies the content of one file to another. Ensure the destination file is created if it doesn't exist.

Q 120: Create a Dictionary of Word Frequencies from a File
Write a function word_frequency_from_file(filename) that accepts a file name, reads the file, and returns a dictionary where the keys are unique words in the file, and the values are the frequency of each word.

Q 121: Append to an Existing File
Write a function append_to_file(filename, content) that appends the provided content to an existing file. If the file doesn't exist, it should be created.

Q 122: Check if a File Exists
Write a function file_exists(filename) that checks if a file with the specified name exists and returns True if it does, otherwise False

Q 123: Rename a File
Write a function rename_file(old_filename, new_filename) that renames an existing file to a new name.

Q 124: Read a File in Reverse
Write a function read_file_reverse(filename) that reads the content of a file line by line in reverse order and prints each line.

Q 125: Delete a File
Write a function delete_file(filename) that deletes the file with the specified filename if it exists.

Q 126: Import Specific Functions from a Module
Write a function use_specific_function() that imports only the sqrt function from the math module and calculates the square root of a given number. Handle any exceptions if the input is invalid.

Q 127: Create a Custom Module for Arithmetic Operations
Write a Python module called arithmetic.py that contains functions for addition, subtraction, multiplication, and division. Then, import this module in a separate script and use it to perform basic arithmetic operations. Handle division by zero using exception handling.

Q 128: Handle File Not Found Exception
Write a function read_file(filename) that attempts to open and read a file. If the file does not exist, it should raise a FileNotFoundError and print a friendly error message to the user.

Q 129: Use a Try-Except Block for Handling Multiple Exceptions
Write a function divide_numbers(a, b) that takes two numbers as input and divides them. Use a try-except block to handle both division by zero and invalid input types (e.g., string inputs) by raising appropriate exceptions.

Q 130: Create a Module for Temperature Conversion
Create a module called temperature.py that contains functions to convert temperatures between Celsius, Fahrenheit, and Kelvin. Then, write a script that imports this module and performs the conversion, handling invalid temperature values with exception handling.

Q 131: Raise a Custom Exception
Write a function validate_age(age) that raises a custom exception AgeError if the age is less than 0 or greater than 150. Define the AgeError class and handle it in the main function when calling validate_age().

Q 132: Use Finally Block for Resource Cleanup
Write a function open_and_close_file(filename) that opens a file, performs some read/write operations, and ensures that the file is closed properly in the finally block, even if an exception occurs during the operations.

Q 133: Create a Module for Basic Banking Operations
Create a module banking.py that has functions for checking account balance, withdrawing money, and depositing money. In the withdrawal function, raise an exception if the user tries to withdraw more than the available balance. Use this module in another script and handle any exceptions related to insufficient funds.

Q 134: Handle Invalid User Input with Custom Exception
Write a function get_integer_input() that prompts the user to input an integer. If the user enters something other than an integer, raise a ValueError and print a message asking the user to enter a valid integer

Q 135: Catching Multiple Exceptions with Specific Messages
Write a function perform_operation(a, b, operation) that performs a mathematical operation (addition, subtraction, etc.) based on the input. Use exception handling to catch and print specific messages for ZeroDivisionError, ValueError, and TypeError.